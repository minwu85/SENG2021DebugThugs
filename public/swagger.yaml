swagger: "2.0"
info:
  title: Order and Admin API
  version: "1.0.0"
  description: API documentation for order management and admin functionalities.

paths:
  /api/person/v1/registerUser:
    post:
      summary: Registers a user
      tags:
        - User
      parameters:
        - in: body
          name: user
          required: true
          schema:
            type: object
            properties:
              username:
                type: string
              password:
                type: string
              email:
                type: string
      responses:
        200:
          description: Successful
        400:
          description: Bad Request

  /api/person/v1/loginUser:
    post:
      summary: Logs in a registered user
      tags:
        - User
      parameters:
        - in: body
          name: login
          required: true
          schema:
            type: object
            properties:
              username:
                type: string
              password:
                type: string
      responses:
        200:
          description: Successful
        400:
          description: Bad Request

  /api/person/v1/logoutUser:
    delete:
      summary: Logs out a user and ends the session
      tags:
        - User
      parameters:
        - name: token
          in: query
          required: true
          type: string
          description: Session token
      responses:
        200:
          description: Successful
        401:
          description: Unauthorized

  /api/order/v1/order/create:
    post:
      summary: Creates an order
      tags:
        - Order
      parameters:
        - in: body
          name: order
          required: true
          schema:
            type: object
            properties:
              personUid:
                type: string
                format: uuid
                description: GUID of the person placing the order
              itemList:
                type: array
                items:
                  type: object
                  properties:
                    itemId:
                      type: string
                      description: Item ID
                    itemQuantity:
                      type: integer
                      description: Quantity to order
                    itemSeller:
                      type: string
                      format: uuid
                      description: Seller GUID
                    itemPrice:
                      type: number
                      description: Price of the item
                    priceDiscount:
                      type: number
                      description: Discount applied to the item
      responses:
        200:
          description: Order created successfully
        400:
          description: Bad Request
        401:
          description: Unauthorized

  /api/order/v1/order/fetchxml/{orderUid}:
    get:
      summary: Retrieves XML representation of an order
      tags:
        - Order
      parameters:
        - name: orderUid
          in: path
          required: true
          type: string
          format: uuid
          description: GUID of the order
      responses:
        200:
          description: XML data retrieved
        401:
          description: Unauthorized

  /api/order/v1/order/retrieve/all/{personUid}:
    get:
      summary: Gets and lists the details of all orders for a specific person
      tags:
        - Order
      parameters:
        - name: personUid
          in: path
          required: true
          type: string
          format: uuid
          description: GUID of the person
      responses:
        200:
          description: Successful
        401:
          description: Unauthorized

  /api/order/v1/order/cancel:
    delete:
      summary: Cancels an order
      tags:
        - Order
      parameters:
        - name: orderUid
          in: query
          required: true
          type: string
          format: uuid
          description: GUID of the order to cancel
      responses:
        200:
          description: Order canceled successfully
        400:
          description: Bad Request
        401:
          description: Unauthorized

  /api/order/v1/clear:
    delete:
      summary: Clears the database
      tags:
        - Other
      responses:
        200:
          description: Database cleared successfully
        500:
          description: Internal server error

  /api/external/invoices/create:
    post:
      summary: Create an invoice (via an external API)
      description: |
        This endpoint forwards the request to an external Invoice API.
        The data is fetched from the external system at:
        `http://sushi-invoice-application.ap-southeast-2.elasticbeanstalk.com/invoices`.
      tags:
        - External - Invoice
      parameters:
        - in: header
          name: Cookie
          description: "Authentication token passed as a cookie"
          required: true
          type: string
        - in: body
          name: body
          description: "Invoice details"
          required: true
          schema:
            type: object
            properties:
              invoiceId:
                type: string
                example: "TEST-INVOICE-ID"
              supplier:
                type: string
                example: "supplier name"
              buyer:
                type: string
                example: "buyer name"
              total:
                type: number
                format: float
                example: 9.99
              currency:
                type: string
                example: "AUD"
              issueDate:
                type: string
                format: date
                example: "2025-04-04"
              dueDate:
                type: string
                format: date
                example: "2025-04-04"
              items:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      example: "string"
                    count:
                      type: integer
                      example: 1
                    cost:
                      type: number
                      format: float
                      example: 9.99
              buyerAddress:
                type: object
                properties:
                  street:
                    type: string
                    example: "string"
                  country:
                    type: string
                    example: "AU"
              buyerEmail:
                type: string
                example: "user@example.com"
              buyerPhone:
                type: string
                example: "string"
              supplierAddress:
                type: object
                properties:
                  street:
                    type: string
                    example: "string"
                  country:
                    type: string
                    example: "AU"
              supplierEmail:
                type: string
                example: "user@example.com"
              supplierPhone:
                type: string
                example: "string"
              paymentAccountId:
                type: string
                example: "string"
              paymentAccountName:
                type: string
                example: "string"
              financialInstitutionBranchId:
                type: string
                example: "string"
      responses:
        '200':
          description: Invoice created successfully
          schema:
            type: object
            properties:
              invoiceid:
                type: string
                example: "string"
